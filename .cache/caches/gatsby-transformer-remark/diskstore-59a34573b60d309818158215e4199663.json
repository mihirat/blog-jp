{"expireTime":9007200845569391000,"key":"transformer-remark-markdown-html-61a9c0b23db0b5a1a20919cdc5a17473-gatsby-plugin-sharpgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-emojis-","val":"<!-- # \n\t\t\t\tポチポチ手動で作成したAWSの既存リソースをTerraformに取り込むスクリプト with terraforming\t\t -->\n<h2>TL; DR</h2>\n<ul>\n<li>手動で作ってしまったAWSのリソースをTerraformに取り込むスクリプトを書きました</li>\n<li>とはいえterraformingの対応範囲が広くないので、妥協は必要</li>\n</ul>\n<h2>背景</h2>\n<p>「まずは最低限の設定だけ手動で作ってしまおう！」とAWSを使い始めて、\n途中から管理が辛くなってきたのでTerraform化したい！と思うものの、\nすでに作ってしまったリソースをどうコード化するか問題、ありますよね（やりました</p>\n<p>このリソースだけはTerraform化されてないんですよーとなると、\n作業の引き継ぎなどもなかなか難しく、負債がどんどん積まれていきます。</p>\n<p>Terraformに既存リソースを記述する方法は</p>\n<h5>方法1. 既存のリソースのv2をTerraformで新規に作成し、タイミングを見て移行していく</h5>\n<ul>\n<li>Pros: Terraform側はめっちゃきれいに書ける</li>\n<li>Cons: ダウンタイムなしでやろうと思うと長期化必死、移行作業もなかなかハード</li>\n</ul>\n<h5>方法2. 既存のリソースのコード化を諦め、data resourceなどでTerraform側に取り込んでいく</h5>\n<ul>\n<li>Pros: 1と3の折衷案</li>\n<li>Cons: コード化はできてないので、既存リソースの状態は管理できない</li>\n</ul>\n<h5>方法3. 既存リソースをそのままTerraformに取り込む</h5>\n<ul>\n<li>Pros: 理想的</li>\n<li>Cons: Terraformのimportが貧弱でつらい（後述）</li>\n</ul>\n<p>なのかなと思います。以下、3を頑張っていきます。</p>\n<h3>terraform importを使う</h3>\n<p>公式でも3を行うための <code class=\"language-text\">terraform import</code> という機能がありますが、</p>\n<ol>\n<li><code class=\"language-text\">.tf</code> にリソース名だけ付与した、中身が空のリソースを作成</li>\n<li><code class=\"language-text\">terraform import</code> する ( <code class=\"language-text\">.tfstate</code> のみ更新される)</li>\n<li>更新された <code class=\"language-text\">.tfstate</code> にマッチするように.tfファイルの中身を手書きで埋める</li>\n</ol>\n<p>という、なかなかに辛い作業です。\nこちらが詳しいです <a href=\"https://blog.mosuke.tech/entry/2018/06/20/terraform_import/\">Terraformのimportの使い方と注意ポイント</a></p>\n<h3>terraformingを使う</h3>\n<p>もっとスマートにできないか、と今回参考にしたのはこちら。\n<a href=\"http://tech.grooves.com/entry/2018/01/22/091959\">Forkwell のインフラをコード化するためにやったこと</a></p>\n<p>terraformingとは、個人で開発されている、Ruby製のコマンドラインツールです。\nインストールなどはリポジトリを御覧ください。\n<a href=\"https://github.com/dtan4/terraforming\">terraforming</a></p>\n<p>こちらは本家と違い、既存リソースを自動的に.tfファイルへ書き出してくれて、さらにそれを.tfstateにマージする機能もあります。\nステキです。これを使って、環境を破壊しないように注意しながら自動的に既存リソースをマージしていきます。</p>\n<p>\b作業の順番としては、</p>\n<ol>\n<li>リモートにある <code class=\"language-text\">.tfstate</code> をローカルにコピーし、さらにバックアップをとる</li>\n<li>既存リソースを <code class=\"language-text\">.tf</code> に書き出す</li>\n<li><code class=\"language-text\">.tf</code> に書き出した中身をローカルの <code class=\"language-text\">.tfstate</code> にマージする</li>\n<li>\bローカルにある <code class=\"language-text\">.tf</code> を使って、ローカルの <code class=\"language-text\">.tfstate</code> に対して <code class=\"language-text\">terraform plan</code> を行い、リソースの追加や削除といった変更が出ないことを確認する ( <code class=\"language-text\">.tf</code> の状態と <code class=\"language-text\">.tfstate</code> に差分がないことを確認する)</li>\n<li>問題なければ、ローカルにコピーした <code class=\"language-text\">.tfstate</code> をリモートに上書き</li>\n</ol>\n<p>となります。これをシェルで雑に書くとこんな処理になります。</p>\n<pre class=\"lang:shell decode:true\">\n#!/usr/bin/env bash\n# terraforming_merge.sh\n\nset -o nounset\nset -o errexit\n\nterraforming_resource_key=$1\noutput_filename=$2.tf\n\n# リモートから .tfstateをとってくる\naws s3 cp s3://my-terraform-state/aws-terraform.tfstate ./bin/\n\n# バックアップとっておく\ncp ./bin/aws-terraform.tfstate ./bin/aws-terraform.tfstate.bak\n\n# .tf に書き出し\nterraforming $terraforming_resource_key > $output_filename\n\n# tfstateにマージ\nterraforming $terraforming_resource_key --tfstate --merge ./bin/aws-terraform.tfstate --overwrite\n\n# 差分がでてないか確認。差分出たときのコメントをgrepしてるだけなので、仕様変更に要注意\n./bin/terraform_plan.sh > result.log\nis_changed=$(echo $(cat result.log | grep 'to add'))\n\nif [ -n \"$is_changed\" ]; then\n  # 差分が出てたら、result.logを見て修正する\n  echo \"diff found. Check your changes.\"\nelse\n  # 差分がなければimport成功\n  echo \"ALL GREEN. .bak is deleted and overwrite merged tfstate to s3.\"\n  rm ./bin/aws-terraform.tfstate.bak\n  rm result.log\n  # upload tfstate\n  aws s3 cp ./bin/aws-terraform.tfstate s3://my-terraform-state/aws-terraform.tfstate\n  rm ./bin/aws-terraform.tfstate\nfi\n</pre>\n<p>呼び出すときは\n<code class=\"language-text\">$ terraforming_merge.sh vpc my-vpc</code>\nみたいに使います。\nこのスクリプトで、リソースの種別ごとにまとめてimportできるようになりました。\n(もしこれを使うようでしたら、一応一行ずつ実行して問題ないか確認してくださいね！)</p>\n<p>完！と行きたいのですが、一つ問題が。\nterraformingでimportできるリソースの種類が非常に限られたものだけになっています。\n（本家の開発が早すぎるのでやむを得ないと思いますが。）</p>\n<p>とはいえ、\nVPC、Route53、Security Group、RDS、ELBなどの\nコアなものについてはカバーされていますので、ある程度はこれでimportできる気がします。</p>\n<p>これでimportできないものについては、\n最初に挙げた1や2の方法で少しずつTerraform化していくことになるのかなと。</p>"}